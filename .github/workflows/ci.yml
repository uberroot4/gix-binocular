name: ci-uniffi

on:
  push:
    branches:
      - main
      - 'run-ci/**'
      - 'gix/main'
      - '**/run-ci/**'
    tags-ignore:
      - '*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CLICOLOR: '1'
  MAVEN_CLI_OPTS: '--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true'

jobs:
  #  msrv:
  #    name: cargo check MSRV
  #
  #    strategy:
  #      matrix:
  #        os:
  #          - windows-2022
  #          - ubuntu-latest
  #
  #    runs-on: ${{ matrix.os }}
  #
  #    defaults:
  #      run:
  #        shell: bash  # Use `bash` even in the Windows job.
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: extractions/setup-just@v3
  #      - name: Read the MSRV
  #        run: |
  #          msrv="$(just msrv)"
  #          tee -a "$GITHUB_ENV" <<<"MSRV=$msrv"
  #      - name: Set up MSRV and nightly toolchains
  #        run: |
  #          rustup toolchain install "$MSRV" nightly --profile minimal --no-self-update
  #      - name: Downgrade locked dependencies to lowest allowed versions
  #        run: |
  #          # TODO(msrv): Use `cargo update --minimal-versions` when `--minimal-versions` is available.
  #          cargo +nightly update -Zminimal-versions
  #      - name: Run some `cargo build` commands on `gix`
  #        run: just check-rust-version "$MSRV"
  #
  #  msrv-badge:
  #    name: Check MSRV badge
  #
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: extractions/setup-just@v3
  #      - name: Ensure we start out clean
  #        run: git diff --exit-code
  #      - name: Regenerate the MSRV badge
  #        run: just msrv-badge
  #      - name: Check for changes
  #        run: git diff --exit-code

  pure-rust-build:
    strategy:
      fail-fast: true
      matrix:
        include:
          - container: amd64/debian:stable-slim
            runner-arch: amd64
            runner-os: ubuntu-latest
            host-triple: x86_64-unknown-linux-gnu
            file-ending: so
          - runner-arch: arm64
            runner-os: ubuntu-24.04-arm
            host-triple: aarch64-unknown-linux-gnu
            file-ending: so
          #          - container: alpine:3.22.0
          #            runner-arch: amd64
          #            runner-os: ubuntu-latest
          #            host-triple: aarch64-unknown-linux-musl
          #            file-ending: so
#          - runner-arch: arm64
#            runner-os: macos-latest
#            host-triple: aarch64-apple-darwin
#            file-ending: dylib
#          - runner-arch: x86_64
#            runner-os: macos-latest
#            host-triple: x86_64-apple-darwin
#            file-ending: dylib
    runs-on: ${{ matrix.runner-os }}
    container: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v4
      - name: Prerequisites (alpine-only)
        if: startsWith(matrix.runner-os, 'ubuntu') && matrix.container != null && contains(matrix.container, 'alpine')
        shell: sh
        run: |
          apk update
          apk add --no-cache ca-certificates curl gcc musl-dev bash
      - name: Prerequisites (non-alpine)
        if: startsWith(matrix.runner-os, 'ubuntu') && matrix.container != null && !contains(matrix.container, 'alpine')
        run: |
          prerequisites=(
            ca-certificates
            curl
            gcc  # rustc calls gcc to invoke the linker.
            libc-dev  # rustc, in the toolchain we are using, dynamically links to the system libc.
          )
          dpkg --add-architecture ${{ matrix.runner-arch }}
          apt-get update
          apt-get install --no-install-recommends -y -- "${prerequisites[@]}"
        shell: bash  # This step needs `bash`, and the default in container jobs is `sh`.
      - name: Install Rust via Rustup
        run: |
          # Specify toolchain to avoid possible misdetection based on the 64-bit running kernel.
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs |
            sh -s -- -y --default-host ${{ matrix.host-triple }} --profile minimal
      - name: Add Rust tools to path
        run: echo "PATH=$HOME/.cargo/bin:$PATH" >> "$GITHUB_ENV"
      - uses: Swatinem/rust-cache@v2
      - name: Build library for target ${{ matrix.host-triple }}
        shell: bash
        run: |
          crates=(
            binocular-ffi
          )
          set +x
          for crate in "${crates[@]}"; do
            cargo build --release -p "$crate" --target ${{ matrix.host-triple }}
          done
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.host-triple }}
          path: target/${{ matrix.host-triple }}/release/libbinocular_ffi.${{ matrix.file-ending }}

  test-ffi-artifacts:
    needs: pure-rust-build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        java_version: [ '23', '24' ]
        distribution: [ 'temurin' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust via Rustup
        run: |
          # Specify toolchain to avoid possible misdetection based on the 64-bit running kernel.
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs |
            sh -s -- -y --default-host x86_64-unknown-linux-gnu --profile minimal

      - name: Add Rust tools to path
        run: echo "PATH=$HOME/.cargo/bin:$PATH" >> "$GITHUB_ENV"

      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: 'true'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*'
          merge-multiple: false

      - name: Combine artifacts
        run: |
          # Debug: List contents of artifacts directory
          echo "Contents of artifacts directory:"
          ls -la artifacts/
          
          # Create target directory structure
          mkdir -p target
          
          # Debug: List contents of each artifact directory
          echo "Contents of each artifact directory:"
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              echo "Directory: $dir"
              ls -la "$dir"
            fi
          done
          
          # Move each artifact to its correct location
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              target_dir="kotlin/src/main/resources/$(basename "$dir")"
              mkdir -p "$target_dir"
              echo "Copying from $dir to $target_dir"
              cp "$dir"libbinocular_ffi.* "$target_dir/" 2>/dev/null || echo "No files found in $dir"
            fi
          done
          
      - name: Build uniffi Kotlin File
        run: |
          cargo run --release\
              --package binocular-ffi\
              --bin uniffi-bindgen generate\
                --library kotlin/src/main/resources/x86_64-unknown-linux-gnu/libbinocular_ffi.so\
                --language kotlin\
                --out-dir kotlin/src/main/kotlin

      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: binocular-ffi-libs.${{ matrix.distribution }}.${{ matrix.java_version }}
          path: kotlin

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}.${{ matrix.distribution }}.${{ matrix.java_version }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}.${{ matrix.distribution }}.${{ matrix.java_version }}--maven-

      - name: Set up JDK ${{ matrix.distribution }}/${{ matrix.java_version }}
        uses: actions/setup-java@v4
        with:
          cache: 'maven'
          cache-dependency-path: 'kotlin/pom.xml'
          java-version: ${{ matrix.java_version }}
          distribution: ${{ matrix.distribution }}

      - name: Verify Parent with Maven
        working-directory: kotlin
        run: mvn $MAVEN_CLI_OPTS validate

      - name: Compile with Maven
        working-directory: kotlin
        run: mvn $MAVEN_CLI_OPTS compile

      - name: Run tests
        working-directory: kotlin
        run: mvn $MAVEN_CLI_OPTS test

      - name: Publish package
        working-directory: kotlin
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}