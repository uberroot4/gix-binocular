stages:
  - build
  - unit_test
  - integration_test
  - release
  - benchmark

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PY_VER: "python:3.13-alpine3.21"
  RUST_VER: "rust:1.85.0-alpine3.21"

.before_script:
  before_script:
    - python --version # For debugging
    - pip install virtualenv
    - virtualenv .venv
    - source .venv/bin/activate

.default_python:
  extends: .before_script
  image: $PY_VER
  cache:
    paths:
      - .cache/pip
      - .venv/

.rust-base:
  image: $RUST_VER
  cache:
    - key:
        files:
          - Cargo.lock
      fallback_keys:
        - cache-$CI_DEFAULT_BRANCH
        - cache-default
      paths:
        - ./target
  before_script:
    - apk add make cmake gcc g++ bash git
    - rustc -V
    - cargo --version
    - bash --version
    - /usr/bin/env bash --version
    - git --version

build:gitinfo:
  extends: .rust-base
  stage: build
  script:
    - cargo build --profile=ci-dev --bin gitinfo
    - target/ci-dev/gitinfo -h
    - target/ci-dev/gitinfo diff -h
    - target/ci-dev/gitinfo commits -h
    - target/ci-dev/gitinfo blame -h
  artifacts:
    # untracked: false
    # when: on_success
    # access: all
    expire_in: "60 days"
    paths:
      - "target/ci-dev/gitinfo"

#.webassembly-base:
#  extends: .rust-base
#  before_script:
#    - apk add --no-cache musl-dev
#    - cargo install wasm-bindgen-cli #wasm-pack
#    - apk add wasm-pack
#    - wasm-pack --version
#
#build:commits:webassembly:
#  extends: .webassembly-base
#  stage: build
#  script:
#    - cd crates/commits/webassembly
#    - cargo build --no-default-features --target=wasm32-unknown-unknown --verbose
#    - wasm-pack build --dev --target web
#  artifacts:
#    # untracked: false
#    # when: on_success
#    # access: all
#    expire_in: "60 days"
#    paths:
#      - "crates/commits/webassembly/pkg"

.test-default:
  extends: .rust-base
  needs:
    - build:gitinfo
  cache:

########## UNIT TESTS ##########

unit_test:crate:commits:
  extends: .test-default
  stage: unit_test
  script:
    - RUST_LOG=TRACE cargo test --verbose -p commits

unit_test:crate:diff:
  extends: .test-default
  stage: unit_test
  script:
    - RUST_LOG=TRACE cargo test --verbose -p cartography-diff

unit_test:crate:render:
  extends: .test-default
  stage: unit_test
  script:
    - RUST_LOG=TRACE cargo test --verbose -p render

unit_test:crate:shared:
  extends: .test-default
  stage: unit_test
  script:
    - RUST_LOG=TRACE cargo test --verbose -p shared

########## INTEGRATION TESTS ##########
.integration_test:base:
  extends: .test-default
  stage: integration_test
  variables:
  script:
    - echo ${PACKAGE} ${CRATE}
    - RUST_BACKTRACE=full RUST_LOG=TRACE cargo test --verbose -p ${PACKAGE}
  artifacts:
    # untracked: false
    when: always
    # access: all
    expire_in: "60 days"
    paths:
      - "crates/${CRATE}/tests/fixtures"

integration_test:crate:diff-test:
  extends: .integration_test:base
  variables:
    CRATE: diff
    PACKAGE: cartography-diff-test

integration_test:crate:commits-test:
  extends: .integration_test:base
  variables:
    CRATE: commits
    PACKAGE: commits-test

########## RELEASE ##########

build:gitinfo:release:
  stage: release
  extends: .rust-base
  needs:
    - integration_test:crate:diff-test
    - integration_test:crate:commits-test
    - unit_test:crate:commits
    - unit_test:crate:diff
    - unit_test:crate:render
    - unit_test:crate:shared
  script:
    - cargo build --release --bin gitinfo
  artifacts:
    # untracked: false
    # when: on_success
    # access: all
    expire_in: "60 days"
    paths:
      - "target/release/gitinfo"

build:gitinfo:release:python:
  stage: release
  extends: .rust-base
  needs:
    - build:gitinfo
  variables:
  before_script:
    - !reference [".rust-base", "before_script"]
    - apk add --no-cache python3 py3-pip
    - python3 -m venv ./venv
    - . ./venv/bin/activate
    - pip install --upgrade pip
    - pip install maturin[patchelf]
    - maturin --help
  script:
    - which python
    - cd ./crates/pyo3-bindings
    - pwd
    - ls -la .
    - maturin build -r

########## BENCHMARKING ##########

fork-join:rust:
  stage: benchmark
  when: manual
  image: alpine:3.18
  script:
    - echo "OK"

fork-join:python:
  extends: "fork-join:rust"

.benchmark-base:python:
  extends: .default_python
  stage:
    benchmark
  needs:
    - job: "fork-join:python"
  image: $PY_VER
  variables:
  before_script:
    - apk add git hyperfine bash libgit2 make cmake gcc g++
    - pip install pyrepositoryminer --index-url https://gitlab-ci-token:${CI_JOB_TOKEN}@reset.inso.tuwien.ac.at/repo/api/v4/projects/4273/packages/pypi/simple
    - pyrepositoryminer --help
    - nproc --all
  script:
    - echo ${URL}, ${TARGET}
    - git clone --no-checkout ${URL} ${TARGET}
    - cd ${TARGET}
    - git rev-list --count HEAD
    - git rev-list --count --no-merges HEAD
    - cd ..
    - pyrepositoryminer branch --no-local --remote ${TARGET} | grep -v -E '^origin/HEAD$' > branches.txt
    - hyperfine --show-output --warmup ${WARMUPS} --runs ${RUNS} --export-json hyperfine.pyrepositoryminer.${TARGET}.json --export-csv hyperfine.pyrepositoryminer.${TARGET}.csv --parameter-list repo ${TARGET} 'cat branches.txt | pyrepositoryminer commits --no-simplify-first-parent --no-drop-duplicates {repo} | wc -l'
    - cat branches.txt | pyrepositoryminer commits --no-simplify-first-parent --no-drop-duplicates ${TARGET} | wc -l
  artifacts:
    # untracked: false
    when: always
    # access: all
    expire_in: "30 days"
    paths:
      - "branches.txt"
      - "hyperfine.pyrepositoryminer.${TARGET}.json"
      - "hyperfine.pyrepositoryminer.${TARGET}.csv"


.benchmark-base:
  stage:
    benchmark
  timeout: 5h
  needs:
    - job: "build:gitinfo:release"
      artifacts: true
    - job: "fork-join:rust"
  image: alpine:3.18
  before_script:
    - apk add git hyperfine bash
    - nproc --all
  variables:
  script:
    - echo ${URL}, ${TARGET}
    - git clone --no-checkout ${URL} ${TARGET}
    - cd ${TARGET}
    - git rev-list --count HEAD
    - git rev-list --count --no-merges HEAD
    - cd ..
    - ls -lah .
    - ls -lah ./scripts
    - ./target/release/gitinfo --help
    - hyperfine --warmup ${WARMUPS} --runs ${RUNS} --export-json hyperfine.gitinfo.${TARGET}.json --export-csv hyperfine.gitinfo.${TARGET}.csv --parameter-list repo ${TARGET} --parameter-list workers 1,2,3,4,5,6,7,8 --parameter-list algorithm histogram,myers,myers-minimal './target/release/gitinfo diff --git-dir {repo} --threads {workers} --algorithm {algorithm}'
  artifacts:
    # untracked: false
    when: always
    # access: all
    expire_in: "30 days"
    paths:
      - "hyperfine.gitinfo.${TARGET}.json"
      - "hyperfine.gitinfo.${TARGET}.csv"


############################## PYTHON BENCHMARKS ##############################
bench-binocular:python:
  extends: .benchmark-base:python
  variables:
    URL: https://github.com/INSO-TUWien/Binocular.git
    TARGET: binocular
    WARMUPS: 1
    RUNS: 10

bench-dubbo:python: # 7492 commits
  extends: .benchmark-base:python
  variables:
    URL: https://github.com/apache/dubbo.git
    TARGET: dubbo
    WARMUPS: 1
    RUNS: 10

bench-pandas:python: # 34933 commits
  extends: .benchmark-base:python
  variables:
    URL: https://github.com/pandas-dev/pandas.git
    TARGET: pandas
    WARMUPS: 1
    RUNS: 10

############################## RUST BENCHMARKS ##############################
bench-binocular: # 1724 commits
  extends: .benchmark-base
  variables:
    URL: https://github.com/INSO-TUWien/Binocular.git
    TARGET: binocular
    WARMUPS: 1
    RUNS: 10

bench-dubbo: # 7492 commits
  extends: .benchmark-base
  variables:
    URL: https://github.com/apache/dubbo.git
    TARGET: dubbo
    WARMUPS: 1
    RUNS: 5
    
bench-click: # 2443 commits
  extends: .benchmark-base
  variables:
    URL: https://github.com/pallets/click.git
    TARGET: click
    WARMUPS: 1
    RUNS: 10

bench-jinja: # 2794 commits
  extends: .benchmark-base
  variables:
    URL: https://github.com/pallets/jinja.git
    TARGET: jinja
    WARMUPS: 1
    RUNS: 10

bench-spring-ai: # 642 commits
  extends: .benchmark-base
  variables:
    URL: https://github.com/spring-projects/spring-ai.git
    TARGET: spring-ai
    WARMUPS: 1
    RUNS: 15

bench-spring-graphql: # 1294 commits
  extends: .benchmark-base
  variables:
    URL: https://github.com/spring-projects/spring-graphql.git
    TARGET: spring-graphql
    WARMUPS: 1
    RUNS: 10

bench-spring-kafka: # 2348 commits
  extends: .benchmark-base
  variables:
    URL: https://github.com/spring-projects/spring-kafka.git
    TARGET: spring-kafka
    WARMUPS: 1
    RUNS: 5

bench-spring-data-jpa: # 2143 commits
  extends: .benchmark-base
  variables:
    URL: https://github.com/spring-projects/spring-data-jpa.git
    TARGET: spring-data-jpa
    WARMUPS: 1
    RUNS: 5

bench-spring-petclinic: # 893 commits
  extends: .benchmark-base
  variables:
    URL: https://github.com/spring-projects/spring-petclinic.git
    TARGET: spring-petclinic
    WARMUPS: 1
    RUNS: 15